{"version":3,"sources":["card.js","CardList.js","SearchBox.js","robots.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","username","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","filteredRobots","filter","toLowerCase","includes","src_SearchBox","src_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAceA,EAZF,SAAAC,GAAuB,IAArBC,EAAqBD,EAArBC,KAAMC,EAAeF,EAAfE,MAAOC,EAAQH,EAARG,GAC3B,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,uDAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA2BP,EAA3B,mBACrBC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,cAAML,GACNG,EAAAC,EAAAC,cAAA,aAAKJ,MCgBQS,EApBE,SAAAX,GAAgB,IAAbY,EAAaZ,EAAbY,OACnB,OACCR,EAAAC,EAAAC,cAAA,WAEEM,EAAOC,IAAI,SAACC,EAAMC,GAClB,OACAX,EAAAC,EAAAC,cAACU,EAAD,CACCC,IAAKF,EACLZ,GAAIS,EAAOG,GAAGZ,GACdF,KAAMW,EAAOG,GAAGd,KAChBC,MAAOU,EAAOG,GAAGb,YCGPgB,EAdI,SAAAlB,GAAiCA,EAA/BmB,YAA+B,IAAlBC,EAAkBpB,EAAlBoB,aACjC,OACChB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,SACAC,UAAW,mCACXc,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCVCR,EAAS,CACpB,CACET,GAAI,EACJF,KAAM,gBACNuB,SAAU,OACVtB,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,eACNuB,SAAU,YACVtB,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,mBACNuB,SAAU,WACVtB,MAAO,sBAET,CACEC,GAAI,EACJF,KAAM,mBACNuB,SAAU,WACVtB,MAAO,6BAET,CACEC,GAAI,EACJF,KAAM,mBACNuB,SAAU,SACVtB,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,uBACNuB,SAAU,mBACVtB,MAAO,2BAET,CACEC,GAAI,EACJF,KAAM,kBACNuB,SAAU,eACVtB,MAAO,0BAET,CACEC,GAAI,EACJF,KAAM,2BACNuB,SAAU,gBACVtB,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,kBACNuB,SAAU,WACVtB,MAAO,2BAET,CACEC,GAAI,GACJF,KAAM,qBACNuB,SAAU,iBACVtB,MAAO,2BCvBIuB,qBA3Bd,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAODI,eAAiB,SAACC,GACjBR,EAAKS,SAAS,CAAEhB,YAAae,EAAME,OAAOC,SAP1CX,EAAKY,MAAQ,CACZ1B,OAAQA,EACTO,YAAa,IAJAO,wEAWL,IAAAa,EAAAV,KACFW,EAAiBX,KAAKS,MAAM1B,OAAO6B,OAAO,SAAA7B,GAChD,OAAOA,EAAOX,KAAKyC,cAAcC,SAASJ,EAAKD,MAAMnB,YAAYuB,iBAElE,OACCtC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,MAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAW,MAAf,eACAH,EAAAC,EAAAC,cAACsC,EAAD,CAAWxB,aAAgBS,KAAKI,iBAChC7B,EAAAC,EAAAC,cAACuC,EAAD,CAAUjC,OAAU4B,YApBHM,cCICC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c4731fd5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n\treturn (\r\n\t\t<div className= 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t<img alt='robots' src ={`https://robohash.org/${id}?size=200x200`}/>\r\n\t\t<div>\r\n\t\t<h2> {name}</h2>\r\n\t\t<p> {email}</p>\r\n\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './card'\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n\treturn(\r\n\t\t<div>\r\n\t\t{\r\n\t \t robots.map((user, i) => {\r\n\t \t return(\r\n\t\t  <Card\r\n\t\t   key={i} \r\n\t\t   id={robots[i].id} \r\n\t\t   name={robots[i].name} \r\n\t\t   email={robots[i].email}\r\n\t\t   />\r\n\t\t   );\r\n\t})\r\n\t \t}\r\n\t \t</div>\r\n\t \t);\r\n\t\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst  SearchBox = ({searchfield, searchChange}) => {\r\n\treturn (\r\n\t\t<div className=\"pd2\">\r\n\t\t<input \r\n\t\tclassName =\"pd3 ba b--green bg-lightest-blue\"\r\n\t\ttype='search' \r\n\t\tplaceholder='search robots'\r\n\t\tonChange={searchChange}\r\n\t\t />\r\n\t\t\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport { robots } from './robots';\r\nimport './App.css';\r\n\r\n\r\n\t\r\nclass  App extends Component{\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: robots,\r\n\t\tsearchfield: \"\"\r\n\t\t}\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({ searchfield: event.target.value})\r\n \t}\r\n\trender() {\r\n\t\tconst filteredRobots = this.state.robots.filter(robots =>{\r\n \treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n \t})\r\n\treturn(\r\n\t\t<div className= \"tc\">\r\n\t\t<h1 className= 'f2'>Robofriends</h1>\r\n\t\t<SearchBox searchChange = {this.onSearchChange}/>\r\n\t\t<CardList robots = {filteredRobots} />\r\n\t\t</div>\r\n\r\n\t\t\t);\r\n\t}\r\n\t\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}